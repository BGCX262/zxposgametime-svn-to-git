#summary Game time take iii, design model.
#labels Phase-Implementation

本次Game Time我们关注模块设计。上两次我们已经练习了根据用例建立待实现系统的Domain Model，在Domain Model的下一个阶段应该就是概要设计（我不确定这一点）。我猜想从Domain Model推演出一个完整的概要设计可能是会有一点难度的，所以这次我们从一个Domain Model的片段（模块）出发，设计出一个概要/详细设计

= 背景知识 =

我们知道，测试软件从手机接口中得到的是二进制码流，每个码流逻辑结构由协议所定义。码流前面若干个位标识消息类型，后面的部分依据不同的消息，分为若干类型。对于复杂的消息，有时有嵌套循环情形。CNT1软件解码模块的任务是把消息识别出来，并与消息名称相映射。为每个消息类型构造特定的消息结构体，把每条消息中的字段解析出来，填入到相应结构体的相应字段中。这个工作很烦很枯燥。工作量大，容易出错。来不及解的部分，先留着，直到有用户抱怨怎么老出现Unknown Message。解出的部分，解对了吗？不知道。只能人工去对。侥幸会发现错误。有些错误一直隐藏着。

有了Auto Decoder(自动解码器)，开发人员不再需要针对每条消息去写C++代码解析了，只需要根据协议，按简单语法规范写一个脚本，在这个脚本中定义消息识别ID、按顺序定义这几个位代表哪个字段，数据类型是什么，等等。然后自动解码器读取这个脚本，就可以对输入的码流进行自动解析了。甚至，有可能连脚本都不需要人工编写，直接根据协议文本生成脚本（协议文本的格式规范性是很好的）。


= 用例 =

这里给出的用例，*主要*用来描述Auto Decoder是如何被外界使用的，而不是描述Auto Decoder是如何工作的。在这里我们假设CNT1软件是Auto Decoder的操作者。

== 用例一 ==
*CNT1调用Auto Decoder进行解码*

 * *操作者*：CNT1
 * *范围*：Model Auto Decoder
 * *主成功场景*：
  # CNT1生成了一个Auto Decoder的实例。
  # CNT1把某个“解码配置文件”传递给Auto Decoder，完成Auto Decoder的初始化。（CNT1具备当前正在进行测试的信息，比如终端的版本，网络的制式等，所以由CNT1指定配置文件。）
  # Auto Decoder 读取配置文件，完成自己的初始化。
  # CNT1向Auto Decoder输入一个二进制流。
  # Auto Decoder根据配置文件中的描述，将二进制流中的信息“装配”到自己的成员变量里面。
  # Auto Decoder返回包含刚刚二进制流所有信息的对象。因为Auto Decoder不负责存储解码后的信息。
  # 重复5～6步

 * *扩展场景*：
  5a 如果发现二进制流无法解析，抛出异常，或者返回一个NULL对象（个人比较赞同这个）？

 * *补充说明*：
   # 对待解码的二进制流的约束如下：包含消息头和消息体两部分，消息头的大小是固定的，消息体的大小由消息头指定。消息头包含消息的类型信息。消息体只能包含固定大小的数据，数据里面不能包含控制位。控制位可能是bool型的值，用来指示后面某个字段是否出现，控制位也可能是int型的值，用来标识后面的字段出现几次。数据也不可以是嵌套的。
   # Auto Decoder返回的对象的设计，放在概要设计里面完成。

= 领域模型 =

这里给出一个领域模型的片段。领域模型的用处是描述Auto Decoder是如何与客户交互的。这个领域模型看起来很像是文字用例的UML表示。只能说两个东东太像一点了。也许过于简单的系统（比如这个系统）的用例和领域模型是直接映射的吧。

== 识别出来的对象 ==

||Code||待解码的一条二进制消息||
||CodeArray||存放相同制式的消息||
||CodeDescription||描述Code中各二进制位代表意义||
||AutoDecoder||解码类||
||Message||Code被解码之后变成消息，是一种自描述的结构体||

== 对象之间的关系 ==

静态类图：

http://lh3.ggpht.com/jianzhou.cn/SESv26X_xEI/AAAAAAAAAz8/KfEesIggsMg/s800/Class%20Diagram%20-%20Main.jpg

~~一次Decode动作，即各个部分是如何交互的:~~ 在领域模型里面，不应该出现这么详细的图，实际上这个图已经是是初步的设计，他进行了若干项决策（比如谁接受系统消息，谁有什么职责，谁生成谁的决策）。也许一个简单的描述组织（比如图书馆，商店）如何运转的序列图是可以接受的，他不是那么的细节，其实那样的图就是use-case model。

http://lh5.ggpht.com/jianzhou.cn/SESyAaX_xFI/AAAAAAAAAzU/8vgP_eaAfCc/s800/Sequence%20Diagram%20-%20Decode.jpg


== 对象的属性 ==

=== Code的属性 ===

Code包括包含消息头和消息体两部分，其中消息体是可选部分。消息头包含消息的类型信息，消息体的大小，消息的日期时间等。消息头的大小是固定的，消息体的大小由消息头指定。所以Code的属性可以描述如下：

||Header||消息头||
||Payload||消息体||

消息头的结构是这样的：

||Type||1 Byte 整数||消息的类型||
||DateTime||4 Byte? 浮点数||消息生成的时间||
||PayloadSize||1 Byte 整数||消息体的大小||

对于头，不清楚是否需要ID。

消息体的结构根据消息Type的不同而不同，具体的结构会在协议里面（CodeDescription）里面描述，可能包括的数据类型为Bool，Integer，String

=== Message的属性 ===

Message的属性与Code的属性基本相同，只是对消息体部分补充了描述信息。比如某一个code的消息体部分第0至4字节存放的是RSSI参数的值，那么解码以后在Message里面，就变成了一个tuple(Python的Tuple):(RSSI, Integer, -45)。可以看出，tuple的三个组成部分分别为name:String, type:String和value:type。

对于Code里面是一组值的情况（比如ActivePN），暂时不考虑。

= 概要设计 =

TODO 要完成哪些东西？做到什么程度为止？我不知道。

= 讨论板 =

我觉得我们晚上是否再花点时间过下Domain Model。

我觉得这个课题和前几个不太一样，不一样地方在以下几点：
 # 这应该不算一个用户需求，这需求应该是大部分来自于开发人员。
 # 前几个都是XX管理系统，这是一个协议解析的东东。
 # 这题目中有一个东西我们要先熟悉他，就是解码的规则。

因为课题和之前不太一样，而且我认为的Domain Model对象和周~~老师~~识别出来的有出入，所以还是希望讨论一下。

我识别出来的一些对象：
 * CNT1 ------------------------------------- 系统外对象，去除
 * Decoder ---------------------------------- 保留
 * DecodeConfigFile(即用例中的解码配置文件) --- 文件实体，去除
 * DecodeConfigFileReader ------------------- 保留
 * BinaryStream(二进制流) -------------------- 保留
 * BinaryStreamReader ------------------------ 保留
 * Code -------------------------------------- 保留
 * CodeArray --------------------------------- 保留

对象周健提出的CodeDescription及Message，不觉得有错误，但就我读这个用例来看，我觉得目前还无法识别出这两对象。


另，　我理解的这个二进制文件的编码规则如下，　不确定是否正确：

||Type | DataType | BodySize|| Body ||
||        Head              || Body ||
||           Message3               ||
||           Message4               ||
其中Head部分是定长，Body部分是不定长。

= 总结板 =

== what did we do right? ==
 # 一次设计一个Use Case需要的功能
 # conceptual class会启发design class的设计，可能是一对一的映射。
 # 描述系统内部是如何运转的序列图（相对应于客户与待设计系统交互的那种序列图）实际上已经是一部分设计了，不应该出现在Domain Model里面。
 # 在设计的过程当中，会碰到需要引入新design class的情况

== we now know about ==
 # 设计一个功能，是从识别Controler开始的，这个Controler是客户发给待设计系统的System Event。如何找到Controler请参看Controler模式（Chapter 16, AUAP）
 # 在设计的过程当中，需要用Expert、Creater、Controler等几种模式来帮助设计、检验设计。
 # 什么是设计？设计是加入新对象，分配职责（在明确职责的前提下），确定对象之间的交互。


AUAP = Applying UML and Patterns